"use strict";(self.webpackChunkrnboilerplate_doc=self.webpackChunkrnboilerplate_doc||[]).push([[7066],{8453:(e,t,o)=>{o.d(t,{R:()=>c,x:()=>i});var n=o(6540);const r={},s=n.createContext(r);function c(e){const t=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),n.createElement(s.Provider,{value:t},e.children)}},9959:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>p,frontMatter:()=>c,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"components/Switch","title":"Switch","description":"A Switch is a visual control that toggles between two opposite states: on and off.","source":"@site/docs/components/Switch.mdx","sourceDirName":"components","slug":"/components/Switch","permalink":"/rnboilerplate-doc/docs/components/Switch","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/components/Switch.mdx","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Checkbox","permalink":"/rnboilerplate-doc/docs/components/Checkbox"},"next":{"title":"Clickable","permalink":"/rnboilerplate-doc/docs/components/Clickable"}}');var r=o(4848),s=o(8453);const c={},i=void 0,a={},l=[{value:"Usage",id:"usage",level:2},{value:"Props",id:"props",level:2},{value:"trackColor",id:"trackcolor",level:3},{value:"thumbColor",id:"thumbcolor",level:3},{value:"ios_backgroundColor",id:"ios_backgroundcolor",level:3}];function d(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:"A Switch is a visual control that toggles between two opposite states: on and off."}),"\n",(0,r.jsx)("img",{src:"https://github.com/user-attachments/assets/201eac40-d4cf-414c-9736-87b399831ea5",alt:"Vector icon",style:{maxWidth:"30%",height:"auto",boxShadow:"0 10px 15px -3px rgba(0,0,0,0.1), 0 4px 6px -4px rgba(0,0,0,0.1)"}}),"\n",(0,r.jsx)(t.h2,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-tsx",children:"import React from 'react';\nimport { Switch } from './components';\n\nconst Example = () => {\n  return <Switch thumbColor=\"primary\" value={true} />;\n};\n\nexport default Example;\n"})}),"\n",(0,r.jsx)(t.h2,{id:"props",children:"Props"}),"\n",(0,r.jsxs)(t.p,{children:["Extends the ",(0,r.jsx)(t.a,{href:"https://reactnative.dev/docs/switch#props",children:(0,r.jsx)(t.code,{children:"SwitchProps"})})," from React Native."]}),"\n",(0,r.jsx)(t.h3,{id:"trackcolor",children:"trackColor"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Type:"})," ",(0,r.jsx)(t.code,{children:"string"})]}),"\n",(0,r.jsx)(t.h3,{id:"thumbcolor",children:"thumbColor"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Type:"})," ",(0,r.jsx)(t.code,{children:"string"})]}),"\n",(0,r.jsx)(t.h3,{id:"ios_backgroundcolor",children:"ios_backgroundColor"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Type:"})," ",(0,r.jsx)(t.code,{children:"string"})]})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);